<launch>
    
    <!-- Spawn Task-2 Models in Gazebo -->
    <include file="$(find pkg_vb_sim)/launch/task4_world.launch" />

    <!-- Spawn two UR5 in Gazebo -->
    <include file = "$(find pkg_vb_sim)/launch/two_ur5_gazebo.launch" />

    <!-- Spawn T4 Boxes -->
    <node name= "task4_spawn_models" pkg= "pkg_vb_sim" type="task4_spawn_models.py"/>

    <!-- Run Conveyor Belt Service Server -->
    <node name= "node_service_server_conveyor_belt" pkg= "pkg_vb_sim" type="node_service_server_conveyor_belt.py" output="screen"/>


    <!-- for UR5_1 -->
	<group ns="ur5_1">
	    <!-- <rosparam command="load" file="$(find pkg_moveit_ur5)/config/joint_names.yaml" /> -->

	    <include file="$(find pkg_moveit_ur5_1_config)/launch/planning_context.launch">
	      <arg name="load_robot_description" value="true"/>
	    </include>

	    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
	      <param name="/use_gui" value="false"/>
	      <rosparam param="/source_list">[/joint_states]</rosparam>
	    </node>

	    <!-- Launch Moveit move_group Node  -->
	    <include file="$(find pkg_moveit_ur5_1_config)/launch/move_group.launch">
	      <arg name="publish_monitored_planning_scene" value="true"/>
	    </include>

	    <include file="$(find pkg_moveit_ur5_1_config)/launch/moveit_rviz_robot1.launch">
	      <arg name="config" value="true"/>
	    </include>

       <!-- Adding shelf and 2D camera to moveit! Planning scene  in Rviz -->
		<arg name="scene_file" default="$(find pkg_task4)/config/rviz/ur5_1_with_shelf.scene" />
	     	<node name = "moveit_publish_scene_from_text" pkg="moveit_ros_planning" type="moveit_publish_scene_from_text" args="$(arg scene_file)" />

  	</group>



   <!-- for UR5_2  -->
  	<group ns="ur5_2">
	    <!-- <rosparam command="load" file="$(find pkg_moveit_ur5)/config/joint_names.yaml" /> -->

	    <include file="$(find pkg_moveit_ur5_2_config)/launch/planning_context.launch">
	      <arg name="load_robot_description" value="true"/>
	    </include>

	    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
	      <param name="/use_gui" value="false"/>
	      <rosparam param="/source_list">[/joint_states]</rosparam>
	    </node>
	    
	    <!-- Launch Moveit move_group Node  -->
	    <include file="$(find pkg_moveit_ur5_2_config)/launch/move_group.launch">
	      <arg name="publish_monitored_planning_scene" value="true"/>
	    </include>

	    <include file="$(find pkg_moveit_ur5_2_config)/launch/moveit_rviz_robot2.launch">
	      <arg name="config" value="true"/>
	    </include>

        <!-- Adding bins and conveyor belt to moveit! Planning scene  in Rviz -->
		<arg name="scene_file" default="$(find pkg_task4)/config/rviz/ur5_2_sorting_bin.scene" />
		     <node name = "moveit_publish_scene_from_text" pkg="moveit_ros_planning" type="moveit_publish_scene_from_text" args="$(arg scene_file)" />
  	</group>


    <!-- Run Task-4 ROS Node 1 -->
    <!-- Using this node we make the ur5_1 to go to the shelf, pick packages and place them on the conveyor belt -->
    <!-- This node also detects color of the all the packages using color detection technique--> 
    <!-- This node also defines a ROS topic "my_topic" with messsage file having one string element which is used to send the message to the other node about the color of the package being sent to ur5_2  -->
    <!-- This node also start the conveyor belt after placing package on it -->
    <!-- <node name= "node_t4_ur5_1" pkg= "pkg_task4" type="node_t4_ur5_1.py" output="screen"/> --> 

    <!-- Run Task-4 ROS Node 2 -->
    <!-- Using this node we make the ur5_2 to sort the packages -->
    <!-- This node subscribes  the ROS topic "my_topic" which is used to get the color of the next incoming package  -->
   <!-- <node name= "node_t4_ur5_2" pkg= "pkg_task4" type="node_t4_ur5_2.py" output="screen"/>   -->

 

    <!-- Recording Bag File for Submission -->
	    <arg name="record" default="false"/>
	    <arg name="rec_name" default="task4.bag"/>

	    <group if="$(arg record)">
	        <node name="rosbag_record_pick" pkg="rosbag" type="record"
	       args="record -O $(find pkg_task4)/bag_files/$(arg rec_name) --chunksize=10 /eyrc/vb/ur5_1/vacuum_gripper/logical_camera/ur5_1  /eyrc/vb/ur5_2/vacuum_gripper/logical_camera/ur5_2" output="screen"/>
	    </group>



</launch>
